//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace MSCacheWatchService.mscacheWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMemoryCacheService", Namespace="http://tempuri.org/")]
    public partial class MemoryCacheService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAppCenterServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFavsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFavOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllUserCacheInitOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback testGetCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback testSetCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback testFileAddCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback testTimeAddCacheOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MemoryCacheService() {
            this.Url = global::MSCacheWatchService.Properties.Settings.Default.MSCacheWatchService_mscacheWeb_MemoryCacheService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAppCenterServiceCompletedEventHandler GetAppCenterServiceCompleted;
        
        /// <remarks/>
        public event GetFavsCompletedEventHandler GetFavsCompleted;
        
        /// <remarks/>
        public event GetNewsCompletedEventHandler GetNewsCompleted;
        
        /// <remarks/>
        public event RemoveFavCompletedEventHandler RemoveFavCompleted;
        
        /// <remarks/>
        public event AllUserCacheInitCompletedEventHandler AllUserCacheInitCompleted;
        
        /// <remarks/>
        public event RemoveCacheCompletedEventHandler RemoveCacheCompleted;
        
        /// <remarks/>
        public event testGetCacheCompletedEventHandler testGetCacheCompleted;
        
        /// <remarks/>
        public event testSetCacheCompletedEventHandler testSetCacheCompleted;
        
        /// <remarks/>
        public event testFileAddCacheCompletedEventHandler testFileAddCacheCompleted;
        
        /// <remarks/>
        public event testTimeAddCacheCompletedEventHandler testTimeAddCacheCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/GetAppCenterService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetAppCenterService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adAccount) {
            object[] results = this.Invoke("GetAppCenterService", new object[] {
                        adAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppCenterServiceAsync(string adAccount) {
            this.GetAppCenterServiceAsync(adAccount, null);
        }
        
        /// <remarks/>
        public void GetAppCenterServiceAsync(string adAccount, object userState) {
            if ((this.GetAppCenterServiceOperationCompleted == null)) {
                this.GetAppCenterServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppCenterServiceOperationCompleted);
            }
            this.InvokeAsync("GetAppCenterService", new object[] {
                        adAccount}, this.GetAppCenterServiceOperationCompleted, userState);
        }
        
        private void OnGetAppCenterServiceOperationCompleted(object arg) {
            if ((this.GetAppCenterServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppCenterServiceCompleted(this, new GetAppCenterServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/GetFavs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetFavs([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adAccount) {
            object[] results = this.Invoke("GetFavs", new object[] {
                        adAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFavsAsync(string adAccount) {
            this.GetFavsAsync(adAccount, null);
        }
        
        /// <remarks/>
        public void GetFavsAsync(string adAccount, object userState) {
            if ((this.GetFavsOperationCompleted == null)) {
                this.GetFavsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFavsOperationCompleted);
            }
            this.InvokeAsync("GetFavs", new object[] {
                        adAccount}, this.GetFavsOperationCompleted, userState);
        }
        
        private void OnGetFavsOperationCompleted(object arg) {
            if ((this.GetFavsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFavsCompleted(this, new GetFavsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/GetNews", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetNews([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adAccount) {
            object[] results = this.Invoke("GetNews", new object[] {
                        adAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewsAsync(string adAccount) {
            this.GetNewsAsync(adAccount, null);
        }
        
        /// <remarks/>
        public void GetNewsAsync(string adAccount, object userState) {
            if ((this.GetNewsOperationCompleted == null)) {
                this.GetNewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewsOperationCompleted);
            }
            this.InvokeAsync("GetNews", new object[] {
                        adAccount}, this.GetNewsOperationCompleted, userState);
        }
        
        private void OnGetNewsOperationCompleted(object arg) {
            if ((this.GetNewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewsCompleted(this, new GetNewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/RemoveFav", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RemoveFav([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adAccount, int removeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool removeIDSpecified) {
            object[] results = this.Invoke("RemoveFav", new object[] {
                        adAccount,
                        removeID,
                        removeIDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFavAsync(string adAccount, int removeID, bool removeIDSpecified) {
            this.RemoveFavAsync(adAccount, removeID, removeIDSpecified, null);
        }
        
        /// <remarks/>
        public void RemoveFavAsync(string adAccount, int removeID, bool removeIDSpecified, object userState) {
            if ((this.RemoveFavOperationCompleted == null)) {
                this.RemoveFavOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFavOperationCompleted);
            }
            this.InvokeAsync("RemoveFav", new object[] {
                        adAccount,
                        removeID,
                        removeIDSpecified}, this.RemoveFavOperationCompleted, userState);
        }
        
        private void OnRemoveFavOperationCompleted(object arg) {
            if ((this.RemoveFavCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFavCompleted(this, new RemoveFavCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/AllUserCacheInit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AllUserCacheInit() {
            this.Invoke("AllUserCacheInit", new object[0]);
        }
        
        /// <remarks/>
        public void AllUserCacheInitAsync() {
            this.AllUserCacheInitAsync(null);
        }
        
        /// <remarks/>
        public void AllUserCacheInitAsync(object userState) {
            if ((this.AllUserCacheInitOperationCompleted == null)) {
                this.AllUserCacheInitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllUserCacheInitOperationCompleted);
            }
            this.InvokeAsync("AllUserCacheInit", new object[0], this.AllUserCacheInitOperationCompleted, userState);
        }
        
        private void OnAllUserCacheInitOperationCompleted(object arg) {
            if ((this.AllUserCacheInitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllUserCacheInitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/RemoveCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCache([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adAccount, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheName) {
            this.Invoke("RemoveCache", new object[] {
                        adAccount,
                        cacheName});
        }
        
        /// <remarks/>
        public void RemoveCacheAsync(string adAccount, string cacheName) {
            this.RemoveCacheAsync(adAccount, cacheName, null);
        }
        
        /// <remarks/>
        public void RemoveCacheAsync(string adAccount, string cacheName, object userState) {
            if ((this.RemoveCacheOperationCompleted == null)) {
                this.RemoveCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCacheOperationCompleted);
            }
            this.InvokeAsync("RemoveCache", new object[] {
                        adAccount,
                        cacheName}, this.RemoveCacheOperationCompleted, userState);
        }
        
        private void OnRemoveCacheOperationCompleted(object arg) {
            if ((this.RemoveCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/testGetCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string testGetCache([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheName) {
            object[] results = this.Invoke("testGetCache", new object[] {
                        cacheName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void testGetCacheAsync(string cacheName) {
            this.testGetCacheAsync(cacheName, null);
        }
        
        /// <remarks/>
        public void testGetCacheAsync(string cacheName, object userState) {
            if ((this.testGetCacheOperationCompleted == null)) {
                this.testGetCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestGetCacheOperationCompleted);
            }
            this.InvokeAsync("testGetCache", new object[] {
                        cacheName}, this.testGetCacheOperationCompleted, userState);
        }
        
        private void OntestGetCacheOperationCompleted(object arg) {
            if ((this.testGetCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testGetCacheCompleted(this, new testGetCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/testSetCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void testSetCache([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string keyName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string valueStr) {
            this.Invoke("testSetCache", new object[] {
                        keyName,
                        valueStr});
        }
        
        /// <remarks/>
        public void testSetCacheAsync(string keyName, string valueStr) {
            this.testSetCacheAsync(keyName, valueStr, null);
        }
        
        /// <remarks/>
        public void testSetCacheAsync(string keyName, string valueStr, object userState) {
            if ((this.testSetCacheOperationCompleted == null)) {
                this.testSetCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestSetCacheOperationCompleted);
            }
            this.InvokeAsync("testSetCache", new object[] {
                        keyName,
                        valueStr}, this.testSetCacheOperationCompleted, userState);
        }
        
        private void OntestSetCacheOperationCompleted(object arg) {
            if ((this.testSetCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testSetCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/testFileAddCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void testFileAddCache([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheValue) {
            this.Invoke("testFileAddCache", new object[] {
                        cacheKey,
                        cacheValue});
        }
        
        /// <remarks/>
        public void testFileAddCacheAsync(string cacheKey, string cacheValue) {
            this.testFileAddCacheAsync(cacheKey, cacheValue, null);
        }
        
        /// <remarks/>
        public void testFileAddCacheAsync(string cacheKey, string cacheValue, object userState) {
            if ((this.testFileAddCacheOperationCompleted == null)) {
                this.testFileAddCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestFileAddCacheOperationCompleted);
            }
            this.InvokeAsync("testFileAddCache", new object[] {
                        cacheKey,
                        cacheValue}, this.testFileAddCacheOperationCompleted, userState);
        }
        
        private void OntestFileAddCacheOperationCompleted(object arg) {
            if ((this.testFileAddCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testFileAddCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMemoryCacheService/testTimeAddCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void testTimeAddCache([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cacheValue) {
            this.Invoke("testTimeAddCache", new object[] {
                        cacheKey,
                        cacheValue});
        }
        
        /// <remarks/>
        public void testTimeAddCacheAsync(string cacheKey, string cacheValue) {
            this.testTimeAddCacheAsync(cacheKey, cacheValue, null);
        }
        
        /// <remarks/>
        public void testTimeAddCacheAsync(string cacheKey, string cacheValue, object userState) {
            if ((this.testTimeAddCacheOperationCompleted == null)) {
                this.testTimeAddCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestTimeAddCacheOperationCompleted);
            }
            this.InvokeAsync("testTimeAddCache", new object[] {
                        cacheKey,
                        cacheValue}, this.testTimeAddCacheOperationCompleted, userState);
        }
        
        private void OntestTimeAddCacheOperationCompleted(object arg) {
            if ((this.testTimeAddCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testTimeAddCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAppCenterServiceCompletedEventHandler(object sender, GetAppCenterServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppCenterServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppCenterServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetFavsCompletedEventHandler(object sender, GetFavsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFavsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFavsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetNewsCompletedEventHandler(object sender, GetNewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveFavCompletedEventHandler(object sender, RemoveFavCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFavCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFavCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AllUserCacheInitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RemoveCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void testGetCacheCompletedEventHandler(object sender, testGetCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testGetCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testGetCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void testSetCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void testFileAddCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void testTimeAddCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591